 OVS + InfluxDB + Grafana Monitoring Setup
Goal: Monitor Open vSwitch (OVS) stats and visualize them in Grafana using InfluxDB as the time-series database.

 1. Installation Steps

ðŸ”¹ Update & Upgrade System
sudo apt update
sudo apt upgrade

ðŸ”¹ Install Open vSwitch
sudo apt install openvswitch-switch

ðŸ”¹ Install InfluxDB (v1.x)
sudo apt install influxdb influxdb-client

ðŸ”¹ Start and Enable InfluxDB
sudo systemctl start influxdb
sudo systemctl enable influxdb

ðŸ”¹ Verify InfluxDB is Running
curl -G http://localhost:8086/query --data-urlencode "q=SHOW DATABASES"

ðŸ”¹ Install Grafana
sudo apt install -y apt-transport-https software-properties-common wget
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee /etc/apt/sources.list.d/grafana.list
sudo apt update
sudo apt install grafana
sudo systemctl start grafana-server
sudo systemctl enable grafana-server

 2. Python Script Setup

ðŸ”¹ Install Requests Module
pip install requests

ðŸ”¹ Create monitor_ovs.py Script

add the python_script and Save the following:

ðŸ”¹ Run the Script
sudo python3 monitor_ovs.py

 3. Configure OVS Bridges & Ports

ðŸ”¹ View Existing Setup
sudo ovs-vsctl show

ðŸ”¹ Add Bridges and Ports
sudo ovs-vsctl add-br br0
sudo ovs-vsctl add-port br0 dummy0 -- set Interface dummy0 type=internal

sudo ovs-vsctl add-br br1
sudo ovs-vsctl add-port br1 dummy1 -- set Interface dummy1 type=internal
sudo ovs-vsctl add-port br1 dummy2 -- set Interface dummy2 type=internal

ðŸ”¹ Recheck Updated Config
sudo ovs-vsctl show

4.Setup Grafana



 5. Cleanup Commands (Optional)
sudo ovs-vsctl del-br br0
sudo ovs-vsctl del-br br1



 6. Adding Flows Monitoring

ðŸ”¹ View Existing Flows
sudo ovs-ofctl dump-flows br0

ðŸ”¹ Add Flows
sudo ovs-ofctl add-flow br0 "priority=10,in_port=1,actions=output:2"
sudo ovs-ofctl add-flow br0 "priority=10,in_port=2,actions=output:1"

ðŸ”¹ Verify Flow Table
sudo ovs-ofctl dump-flows br0

ðŸ”¹ Modify Python Script for Flows Monitoring

Add the following function to monitor flows:

def get_ovs_flows():
try:
output = subprocess.check_output(["ovs-ofctl", "dump-flows", "br0"]).decode()
flow_count = output.count("priority=")
return flow_count
except subprocess.CalledProcessError as e:
print("Error fetching OVS flows:", e)
return 0

Modify the main loop to include flows:

while True:
b, p, i = get_ovs_stats()
f = get_ovs_flows()
print(f"Sending to InfluxDB â†’ Bridges: {b}, Ports: {p}, Interfaces: {i}, Flows: {f}")
send_to_influx(b, p, i)
time.sleep(10)


 7. Cleanup Commands (Optional)

sudo ovs-vsctl del-br br0
sudo ovs-vsctl del-br br1


